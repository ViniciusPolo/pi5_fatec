# -*- coding: utf-8 -*-
"""PI6_Um_Treim_di_Cumê - Itens menu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mgt8rFuTuQly2xD37nmxq4MGGCk4uI3e

##Carregando o dataset
"""

from google.colab import drive
drive.mount('/content/drive')

# importando bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from pandas.plotting import scatter_matrix

#importando o arquivo
df = pd.read_csv('/content/drive/My Drive/DSM/datasetPI6.csv', sep=';')
df.head()

#informações do dataset
df.info()

"""#Tratamento de atributos com valores ausentes"""

# índices das linhas que contém valores NaN
idxRowNan = pd.isnull(df).any(1).to_numpy().nonzero()

# imprime apenas as linhas com valoes ausentes
display(df.iloc[idxRowNan])

"""#Eliminação de atributos irrelevantes para a indicação de itens do menu (pratos)

"""

# remove as colunas irrelevantes para indicação de tipo de cozinha
df = df.drop(columns=['id_pedido','day_of_week', 'gender', 'id_restaurante', 'cousine_type', 'id_item', 'type_of_product', 'quantity', 'price', 'total_value'])

# imprime o dataframe
display(df.head(n=10))

"""#Gráfico de distribuição de itens dos menus"""

# Gerar gráfico de distribuição de itens dos menus
order_counts = df['food_name'].value_counts()

plt.figure(figsize=(120, 30))
order_counts.plot(kind='bar', color='skyblue')
plt.title('Distribuição de pedidos por itens dos menus')
plt.xlabel('Itens dos menus')
plt.ylabel('Número de pedidos')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

# Mapa de calor com comparação de grupos de idade itens do menu

age_cuisine_comparison = df.groupby('food_name')['age'].value_counts().unstack().fillna(0)

plt.figure(figsize=(20, 20))
sns.heatmap(age_cuisine_comparison, cmap='YlGnBu', annot=True, fmt='.0f')
plt.title('Comparação de grupos de idade e itens do menu')
plt.xlabel('Idade')
plt.ylabel('Itens do menu')
plt.show()

"""#Algoritmo de RECOMENDAÇÃO - KNN:"""

#Instação da biblioteca surprise
!pip install scikit-surprise

#Instalação biblioteca decouple
!pip install decouple

##Algoritmo de RECOMENDAÇÃO - KNN

from sqlalchemy import create_engine
from surprise import Dataset, Reader, KNNBasic
from typing import List


try:
    food = input(str("Digite o prato:\n"))
    cousine = input(str("Digite o tipo de culinária (em maiuscula):\n"))


    df_sql_cousine = pd.read_csv('/content/drive/My Drive/DSM/cousineType.csv', sep=';')
    df_sql_food = pd.read_csv('/content/drive/My Drive/DSM/preferenceByAge.csv', sep=';')

    data = df_sql_cousine
    data.loc[data['age'] == '18-', 'age'] = 1
    data.loc[data['age'] == '18 e 25', 'age'] = 2
    data.loc[data['age'] == '25 e 30', 'age'] = 3
    data.loc[data['age'] == '30 e 40', 'age'] = 4
    data.loc[data['age'] == '40 e 60', 'age'] = 5
    data.loc[data['age'] == '60+', 'age'] = 6
    df = pd.DataFrame(data)

    #Define o formato do leitor
    reader = Reader(rating_scale=(1, 6))

    #Carrega o conjunto de dados
    data = Dataset.load_from_df(df[['user_id', 'cousine_type', 'age']], reader)

    #Cria o conjunto de treinamento
    trainset = data.build_full_trainset()

    #Cria o modelo KNN
    sim_options = {
        'name': 'cosine',
        'user_based': False
    }
    model = KNNBasic(sim_options=sim_options)
    model.fit(trainset)

    #Tipo de cozinha escolhida pelo cliente
    cousine_type = cousine

    #Obtendo recomendações para tipo de cozinha
    age_inner_id = trainset.to_inner_iid(cousine_type)
    neighbors = model.get_neighbors(age_inner_id, k=1)

    #Mapeando os IDs internos de volta para os IDs reais
    neighbors = [trainset.to_raw_iid(inner_id) for inner_id in neighbors]

    print(f"Quem pede culinária {cousine_type} Pode gostar também de:")
    for neighbor in neighbors:
        print(neighbor)

    #Recomendação de pratos

    data = df_sql_food
    data.loc[data['age'] == '18-', 'age'] = 1
    data.loc[data['age'] == '18 e 25', 'age'] = 2
    data.loc[data['age'] == '25 e 30', 'age'] = 3
    data.loc[data['age'] == '30 e 40', 'age'] = 4
    data.loc[data['age'] == '40 e 60', 'age'] = 5
    data.loc[data['age'] == '60+', 'age'] = 6
    df = pd.DataFrame(data)

    #Define o formato do leitor
    reader = Reader(rating_scale=(1, 6))

    #Carrega o conjutno de dados
    data = Dataset.load_from_df(df[['user_id', 'food_name', 'age']], reader)

    #Cria o conjunto de treinamento
    trainset = data.build_full_trainset()

    #Cria o modelo KNN
    sim_options = {
        'name': 'cosine',
        'user_based': False
    }
    model = KNNBasic(sim_options=sim_options)
    model.fit(trainset)

    #Prato escolhido pelo cliente
    food_name = food

    #Obtendo recomendações para prato
    age_inner_id_by_food = trainset.to_inner_iid(food_name)
    neighborsByfood = model.get_neighbors(age_inner_id_by_food, k=3)

    #Mapeando os IDs internos de volta para os IDs reais
    neighborsByfood = [trainset.to_raw_iid(inner_id) for inner_id in neighborsByfood]
    cousine_indication = []
    food_indication = []
    for neighbor in neighborsByfood:
        food_indication.append(neighbor)

    for neighbor in neighbors:
        cousine_indication.append(neighbor)

    # Criar uma instância da classe IndicationResponse
    print (cousine_indication)
    print (food_indication)

except:
    print("ops, algo errado")